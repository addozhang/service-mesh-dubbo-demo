---
# Source: dubbo-mesh/templates/configmap-mock.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: poc-mock-cfg
  namespace: flomesh-dubbo
data:
  mock.js: |+

    pipy({
      _g: {
        config: {
          version: 0,
        },
        responseVariation: 0,
      },
    
      _router: new algo.URLRouter({
        '/config/version': () => new Message(
          _g.config.version.toString()
        ),
    
        '/config': () => new Message(
          JSON.encode(_g.config)
        ),
    
        '/log': req => (
          // console.log('[LOG]', req.body.toString()),
          new Message('OK')
        ),
    
        '/metrics': req => (
          // console.log('[METRICS]', req.body.toString()),
          new Message('OK')
        ),
    
        '/*': () => new Message(
          { status: 404 }, 'Not found'
        )
      })
    })
    
    // Test driver: drives Dubbo with HTTP
    .listen(6080)
      .decodeHttpRequest()
      .replaceMessageBody(
        body => Hessian.encode(
          JSON.decode(body)
        )
      )
      .encodeDubbo()
      .connect('127.0.0.1:20881')
      .decodeDubbo()
      .replaceMessageBody(
        body => JSON.encode(
          Hessian.decode(body)
        )
      )
      .encodeHttpResponse()
    
    .listen(20880)
      .decodeDubbo()
      .replaceMessage(
        msg => new Message(
          {
            id: msg.head.id,
            status: 20,
            isRequest: true,
          },
          Hessian.encode([++_g.responseVariation, 'Hi, there!'])
        )
      )
      .encodeDubbo()
    
    .listen(30881)
      .decodeDubbo()
      .replaceMessage(
        msg => new Message(
          {
            id: msg.head.id,
            status: 20,
            isRequest: true,
          },
          Hessian.encode([1, 'Hi, canary!'])
        )
      )
      .encodeDubbo()
    
    .listen(9000)
      .decodeHttpRequest()
      .replaceMessage(
        req => (
          _router.find(req.head.path)(req)
        )
      )
      .encodeHttpResponse()
    
    .task('1s')
      .use(
        'updater.js',
        'check',
        'config.json',
        config => (
          _g.config = {
            ...config,
            version: Date.now(),
          }
        )
      )
  config.json: |+

    {
      "inbound": {
        "whitelist": null,
        "blacklist": null,
        "circuitBreak": false,
        "rateLimit": 0,
        "dataLimit": 0,
        "canary": {
          "time": null,
          "duration": 10,
          "target": "127.0.0.1:30881"
        }
      },
      "outbound": {
        "rateLimit": 0,
        "dataLimit": 0
      }
    }
  updater.js: |+

    pipy({
      _g: {
        configVersion: 0,
      },
    
      _configVersion: undefined,
      _configUpdated: undefined,
      _url: null,
    })
    
    .pipeline('check')
      .link(
        'check-config-http', () => __argv[0].startsWith('http://'),
        'check-config-file'
      )
    
    // Check configuration in file
    .pipeline('check-config-file')
      .onMessageStart(
        () => (
          _configVersion = os.stat(__argv[0])?.mtime | 0,
          _configVersion !== _g.configVersion && (
            _g.configVersion = _configVersion,
            _configUpdated = true
          )
        )
      )
      .link(
        'update-config-file', () => _configUpdated,
        'end-of-task'
      )
    
    // Update configuration from file
    .pipeline('update-config-file')
      .onSessionStart(
        () => (
          console.log('Updating configuration...'),
          __argv[1](JSON.decode(os.readFile(__argv[0]))),
          console.log('Configuration updated.')
        )
      )
      .link('end-of-task')
    
    // Check configuration via HTTP
    .pipeline('check-config-http')
      .replaceMessage(
        () => (
          _url = new URL(__argv[0] + '/version'),
          new Message({
            method: 'GET',
            path: _url.path,
            headers: {
              Host: _url.host,
            },
          })
        )
      )
      .encodeHttpRequest()
      .connect(() => _url.host)
      .decodeHttpResponse()
      .replaceMessage(msg => (
          msg.head.status === 200 && (
              _configUpdated = msg.body.toString() != _g.configVersion,
              _g.configVersion = msg.body.toString()
          ),
          msg
      ))
      .link(
        'update-config-http', () => _configUpdated,
        'end-of-task'
      )
    
    // Update configuration from HTTP
    .pipeline('update-config-http')
      .onSessionStart(
        () => console.log('Updating configuration...')
      )
      .replaceMessage(
        () => (
          _url = new URL(__argv[0]),
          new Message({
            method: 'GET',
            path: _url.path,
            headers: {
              Host: _url.host,
            },
          })
        )
      )
      .encodeHttpRequest()
      .connect(
        () => _url.host
      )
      .decodeHttpResponse()
      .onMessageBody(
        body => (
          __argv[1](JSON.decode(body)),
          console.log('Configuration updated.')
        )
      )
      .link('end-of-task')
    
    // End of task
    .pipeline('end-of-task')
      .replaceMessage(new SessionEnd)
