apiVersion: v1
kind: Namespace
metadata:
  labels:
    app.kubernetes.io/instance: ingress-pipy
    app.kubernetes.io/managed-by: Kustomize
    app.kubernetes.io/name: ingress-pipy
    app.kubernetes.io/version: 0.2.0
  name: ingress-pipy
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.6.1
  creationTimestamp: null
  name: ingressglobalhooks.flomesh.io
spec:
  group: flomesh.io
  names:
    kind: IngressGlobalHook
    listKind: IngressGlobalHookList
    plural: ingressglobalhooks
    shortNames:
    - igh
    singular: ingressglobalhook
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.defaultHook
      name: Default
      type: boolean
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: IngressGlobalHook is the Schema for the ingressglobalhooks API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: IngressGlobalHookSpec defines the desired state of IngressGlobalHook
            properties:
              script:
                description: Script contains the hook script.
                type: string
            type: object
          status:
            description: IngressGlobalHookStatus defines the observed state of IngressGlobalHook
            properties:
              defaultHook:
                description: DefaultHook indicates if this's the default hook in the cluster
                type: boolean
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: ingress-pipy/serving-cert-fip
    controller-gen.kubebuilder.io/version: v0.6.1
  name: ingressrules.flomesh.io
spec:
  group: flomesh.io
  names:
    kind: IngressRule
    listKind: IngressRuleList
    plural: ingressrules
    shortNames:
    - igr
    singular: ingressrule
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: IngressRule is the Schema for the ingressrules API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: IngressRuleSpec defines the desired state of IngressRule
            properties:
              foo:
                description: Foo is an example field of IngressRule. Edit ingressrule_types.go to remove/update
                type: string
            type: object
          status:
            description: IngressRuleStatus defines the observed state of IngressRule
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ingress-pipy-fip
  namespace: ingress-pipy
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ingress-pipy-leader-election-role-fip
  namespace: ingress-pipy
rules:
- apiGroups:
  - ""
  - coordination.k8s.io
  resources:
  - configmaps
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: ingress-pipy-role-fip
rules:
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - volumes
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - flomesh.io
  resources:
  - ingressglobalhooks
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - flomesh.io
  resources:
  - ingressglobalhooks/finalizers
  verbs:
  - update
- apiGroups:
  - flomesh.io
  resources:
  - ingressglobalhooks/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - flomesh.io
  resources:
  - ingressrules
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - flomesh.io
  resources:
  - ingressrules/finalizers
  verbs:
  - update
- apiGroups:
  - flomesh.io
  resources:
  - ingressrules/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - networking.k8s.io
  resources:
  - ingressclasses
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ingress-pipy-leader-election-rolebinding-fip
  namespace: ingress-pipy
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ingress-pipy-leader-election-role-fip
subjects:
- kind: ServiceAccount
  name: ingress-pipy-fip
  namespace: ingress-pipy
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ingress-pipy-rolebinding-fip
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ingress-pipy-role-fip
subjects:
- kind: ServiceAccount
  name: ingress-pipy-fip
  namespace: ingress-pipy
---
apiVersion: v1
data:
  config.json: '{"defaultBackend":"ingress-pipy-defaultbackend.ingress-pipy.svc:80","ingresses":{},"version":"0"}'
  config.json.etag: "0"
  hooks.js: |
    pipy()

    .pipeline('pre-routing')

    .pipeline('post-routing')
  hooks.js.default: |
    pipy()
      .pipeline('pre-routing')
      .pipeline('post-routing')
  hooks.js.etag: "0"
  ingress.js: |+
    pipy({
      _g: {
        // [Ingress] - Start
        router: null,
        timestamp: 0,
        // [Ingress] - End
      },

      // [Ingress] - Start
      _target: undefined,
      _configUrl: new URL(os.env.INGRESS_CONFIG_URL || 'http://127.0.0.1:6000/routes'),
      _versionUrl: new URL(os.env.INGRESS_VERSION_URL || 'http://127.0.0.1:6000/version'),
      _needsUpdateConfig: undefined
      // [Ingress] - End
    })

    .listen(os.env.INGRESS_PORT || 8000)
      .link('request')

    // ------------------------------ [INGRESS] Start ------------------------------
    .pipeline('request')
      .decodeHttpRequest()
      .onMessageStart((e, routeKey) => (
        routeKey = (e.head.headers.host || '') + e.head.path,
        console.log("==============> routeKey = " + routeKey),
        _target = _g.router?.find?.(routeKey)?.select?.() || '',
        console.log("==============> resolved target = " + _target)
      ))
      .link(
        '404', () => _target === '',
        'pass', () => _target !== undefined,
      )

    .pipeline('404')
      .replaceMessage(new Message('Not Found.'))
      .encodeHttpResponse({ status: 404 })

    .pipeline('pass')
      .encodeHttpRequest()
      .connect(() => _target)

    // default backend service
    .listen(9000)
      .decodeHttpRequest()
      .replaceMessage(new Message({ status: 404 }, 'Not Found.'))
      .encodeHttpResponse()

    .task('5s')
      .replaceMessage(() => (
        new Message({
          method: 'GET',
          path: _versionUrl.path,
          headers: {
            Host: _versionUrl.host,
          },
        })
      ))
      .encodeHttpRequest()
      .connect(() => _versionUrl.host)
      .decodeHttpResponse()
      .onMessageBody(body => _needsUpdateConfig = (body.toString() != _g.timestamp))
      .link(
        'update-config', () => _needsUpdateConfig === true,
        'end-of-update', () => _needsUpdateConfig === false,
      )

    .pipeline('update-config')
      .replaceMessage(() => (
        new Message({
          method: 'GET',
          path: _configUrl.path,
          headers: {
            Host: _configUrl.host,
          },
        })
      ))
      .encodeHttpRequest()
      .connect(() => _configUrl.host)
      .decodeHttpResponse()
      .onMessageBody((
        body,
        config,
        router,
        ingresses,
        backend,
        path,
        upstreams,
      ) => (
        console.log('Got new configuration:', body.toString()),

        router = new algo.URLRouter,
        config = JSON.decode(body),
        ingresses = config?.ingresses,
        console.log('Ingress Rules:', JSON.stringify(ingresses)),
        _g.timestamp = config?.version,
        ingresses ? (
          // for each ingress
          Object.values(ingresses).forEach(rules => (
            console.log("Processing ingress rule:", JSON.stringify(rules)),

            rules ? (
              rules.forEach(ing => (
                path = (ing?.host || '') + (ing?.path || '/'),
                  ing.endpoints ? (
                    upstreams = {},
                      ing.endpoints.forEach( ep => (
                        upstreams[ep.address + ":" + ep.port] = 1
                      )),
                      console.log("path: " + path + ", upstreams=" + JSON.stringify(upstreams)),

                      backend = new algo.RoundRobinLoadBalancer(upstreams),
                      router.add(path, backend),

                      _g.router = router
                  ) : (
                    console.log("No endpoints avaliable for ingress, path=" + path)
                  )
              ))
            ) : (
              console.log('Empty rules.')
            )
          )),
          console.log("Routes are loaded: " + _g.router)
        ) : console.log('Invalid JSON encoding')
      ))
      .link('end-of-update')

    .pipeline('end-of-update')
      .replaceMessage(() => new SessionEnd)
    // ------------------------------ [INGRESS] End ------------------------------

  proxy.js: |-
    pipy((
      loadConfig,
    ) => (
      loadConfig = data => (
        ((
          config,
          router,
        ) => (
          console.log('Updating configuration...'),
          config = JSON.decode(data),
          config ? (
            router = new algo.URLRouter,
              Object.values(config.ingresses).forEach(
                rules => (
                  rules.forEach(
                    ({ host, path, endpoints }) => (
                      router.add(
                        (host || '') + (path || '/'),
                        {
                          balancer: new algo.RoundRobinLoadBalancer(
                            Object.fromEntries(
                              endpoints.map(
                                ({ address, port }) => [`${address}:${port}`, 1]
                              )
                            )
                          )
                        }
                      )
                    )
                  )
                )
            ),
            console.log('Configuration updated'),
            {
              config,
              router,
            }
          ) : {}
        ))()
      ),
      {
        _CONFIG_URL: new URL(os.env.INGRESS_CONFIG_URL || 'http://127.0.0.1:6000/config'),
        _SCRIPT_URL: new URL(os.env.INGRESS_SCRIPT_URL || 'http://127.0.0.1:6000/script'),

        _g: {
          ...loadConfig(os.readFile('config.json')),
          autoConnectionID: 0,
        },

        _connectionPool: new algo.ResourcePool(
          () => ++_g.autoConnectionID
        ),

        _loadConfig: data => (
          Object.assign(_g, loadConfig(data))
        ),

        _isResponse: undefined,
        _service: undefined,
        _target: undefined,
      }
    ))

    .listen(os.env.INGRESS_PORT || 8000)
      .onSessionEnd(
        () => _connectionPool.freeTenant(__inbound.id)
      )
      .decodeHttpRequest()
      .demux('pre-routing')
      .encodeHttpResponse()

    .pipeline('pre-routing')
      .use(
        'hooks.js',
        'pre-routing',
        () => _g.config
      )
      .onMessageStart(
        msg => _isResponse = Boolean(msg.head.status)
      )
      .link(
        'routing', () => !_isResponse,
        'bypass'
      )

    .pipeline('routing')
      .onMessageStart(
        msg => _service = _g.router?.find?.(
          msg.head.headers.host,
          msg.head.path,
        )
      )
      .link(
        'post-routing', () => _service,
        'no-route'
      )

    .pipeline('post-routing')
      .use(
        'hooks.js',
        'post-routing',
        () => _g.config
      )
      .onMessageStart(
        msg => _isResponse = Boolean(msg.head.status),
      )
      .link(
        'balance', () => !_isResponse,
        'bypass'
      )

    .pipeline('balance')
      .onMessageStart(
        () => _target = _service.balancer.select()
      )
      .link(
        'upstream', () => _target,
        'no-target'
      )

    .pipeline('upstream')
      .mux(
        'connection',
        () => _connectionPool.allocate(_target, __inbound.id)
      )

    .pipeline('connection')
      .encodeHttpRequest()
      .connect(
        () => _target
      )
      .decodeHttpResponse()

    .pipeline('no-route')
      .replaceMessage(
        new Message({ status: 404 }, 'No route')
      )

    .pipeline('no-target')
      .replaceMessage(
        new Message({ status: 404 }, 'No target')
      )

    .pipeline('bypass')

    .task('5s')
      .use(
        'updater.js',
        'update',
        () => [
          'config.json',
          _CONFIG_URL.href,
          _loadConfig,
        ]
      )

    .task('5s')
      .use(
        'updater.js',
        'update',
        () => [
          'hooks.js',
          _SCRIPT_URL.href,
          pipy.restart,
        ]
      )
  updater.js: |-
    pipy({
      _url: null,
      _version: undefined,
      _needUpdate: undefined,
    })

    .pipeline('update')
      .replaceMessage(
        () => (
          _url = new URL(__argv[1]),
          new Message({
            method: 'HEAD',
            path: _url.path,
            headers: {
              host: _url.host,
            },
          })
        )
      )
      .encodeHttpRequest()
      .connect(
        () => _url.host
      )
      .decodeHttpBodilessResponse()
      .onMessageStart(
        msg => _needUpdate = (
          msg.head.status === 200 &&
          msg.head.headers.etag !== os.readFile(__argv[0] + '.etag')?.toString?.()
        )
      )
      .link(
        'download', () => _needUpdate,
        'end'
      )

    .pipeline('download')
      .replaceMessage(
        () => new Message({
          method: 'GET',
          path: _url.path,
          headers: {
            host: _url.host,
          },
        })
      )
      .encodeHttpRequest()
      .connect(
        () => _url.host
      )
      .decodeHttpResponse()
      .onMessage(
        msg => (
          os.writeFile(__argv[0] + '.etag', msg.head.headers.etag),
          os.writeFile(__argv[0], msg.body),
          __argv[2]?.(msg.body)
        )
      )
      .link('end')

    .pipeline('end')
      .replaceMessage(
        new SessionEnd
      )
kind: ConfigMap
metadata:
  name: ingress-config-fip
  namespace: ingress-pipy
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: config
    app.kubernetes.io/instance: ingress-pipy
    app.kubernetes.io/managed-by: Kustomize
    app.kubernetes.io/name: ingress-pipy
    app.kubernetes.io/version: 0.2.0
  name: ingress-pipy-cfg-fip
  namespace: ingress-pipy
spec:
  ports:
  - name: config
    port: 6000
    protocol: TCP
    targetPort: config
  selector:
    app.kubernetes.io/component: config
    app.kubernetes.io/instance: ingress-pipy
    app.kubernetes.io/name: ingress-pipy
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-pipy
    app.kubernetes.io/managed-by: Kustomize
    app.kubernetes.io/name: ingress-pipy
    app.kubernetes.io/version: 0.2.0
  name: ingress-pipy-controller-fip
  namespace: ingress-pipy
spec:
  externalTrafficPolicy: Local
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: ingress
  selector:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-pipy
    app.kubernetes.io/name: ingress-pipy
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: default-backend
    app.kubernetes.io/instance: ingress-pipy
    app.kubernetes.io/managed-by: Kustomize
    app.kubernetes.io/name: ingress-pipy
    app.kubernetes.io/version: 0.2.0
  name: ingress-pipy-defaultbackend-fip
  namespace: ingress-pipy
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 9000
  selector:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-pipy
    app.kubernetes.io/name: ingress-pipy
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: webhook-service-fip
  namespace: ingress-pipy
spec:
  ports:
  - port: 443
    targetPort: 9443
  selector:
    control-plane: ingress-pipy-manager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: config
    app.kubernetes.io/instance: ingress-pipy
    app.kubernetes.io/managed-by: Kustomize
    app.kubernetes.io/name: ingress-pipy
    app.kubernetes.io/version: 0.2.0
  name: ingress-pipy-cfg-fip
  namespace: ingress-pipy
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: config
      app.kubernetes.io/instance: ingress-pipy
      app.kubernetes.io/name: ingress-pipy
  template:
    metadata:
      labels:
        app.kubernetes.io/component: config
        app.kubernetes.io/instance: ingress-pipy
        app.kubernetes.io/name: ingress-pipy
    spec:
      containers:
      - args:
        - --leader-elect=false
        - --default-backend=ingress-pipy-defaultbackend-fip.ingress-pipy.svc
        - --config-bind-address=:6000
        - --v=2
        command:
        - /ingress-cfg
        image: flomesh/ingress-cfg:0.2.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: config
        ports:
        - containerPort: 6000
          name: config
        - containerPort: 8080
          name: metrics
        - containerPort: 8081
          name: health
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 1000m
            memory: 500Mi
          requests:
            cpu: 250m
            memory: 100Mi
        securityContext:
          allowPrivilegeEscalation: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 101
      serviceAccountName: ingress-pipy-fip
      terminationGracePeriodSeconds: 10
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-pipy
    app.kubernetes.io/managed-by: Kustomize
    app.kubernetes.io/name: ingress-pipy
    app.kubernetes.io/version: 0.2.0
  name: ingress-pipy-controller-fip
  namespace: ingress-pipy
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-pipy
      app.kubernetes.io/name: ingress-pipy
  template:
    metadata:
      labels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-pipy
        app.kubernetes.io/name: ingress-pipy
    spec:
      containers:
      - args:
        - -c
        - cat ${PIPY_CONFIG} && echo "starting ingress-pipy with ${PIPY_CONFIG}..." && /usr/local/bin/pipy ${PIPY_CONFIG} --reuse-port --log-level=debug
        command:
        - /bin/sh
        env:
        - name: PIPY_CONFIG_PATH
          value: /config
        - name: PIPY_CONFIG_NAME
          value: proxy.js
        - name: PIPY_CONFIG
          value: $(PIPY_CONFIG_PATH)/$(PIPY_CONFIG_NAME)
        - name: INGRESS_CONFIG_URL
          value: http://ingress-pipy-cfg-fip.ingress-pipy.svc:6000/routes
        - name: INGRESS_VERSION_URL
          value: http://ingress-pipy-cfg-fip.ingress-pipy.svc:6000/version
        - name: INGRESS_SCRIPT_URL
          value: http://ingress-pipy-cfg-fip.ingress-pipy.svc:6000/scripts
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: _pod_nodeName
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: _pod_name
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: _pod_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: _pod_hostIP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        image: flomesh/pipy-pjs:0.4.0-115
        imagePullPolicy: Always
        name: ingress
        ports:
        - containerPort: 8000
          name: ingress
        - containerPort: 9000
          name: defbkd
        securityContext:
          capabilities:
            add:
            - NET_BIND_SERVICE
            drop:
            - ALL
        volumeMounts:
        - mountPath: /config
          name: shared
      initContainers:
      - command:
        - bash
        - -c
        - |
          /wait-for-it.sh --strict --timeout=0 \
            --host=ingress-pipy-cfg-fip.ingress-pipy.svc \
            --port=6000 \
            -- echo "SERVICE IS READY!" && cp -fv /ingress/* /config
        image: flomesh/wait-for-it:1.0.0
        imagePullPolicy: IfNotPresent
        name: init
        volumeMounts:
        - mountPath: /ingress
          name: config
        - mountPath: /config
          name: shared
      serviceAccountName: ingress-pipy-fip
      terminationGracePeriodSeconds: 10
      volumes:
      - configMap:
          name: ingress-config-fip
        name: config
      - emptyDir: {}
        name: shared
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/instance: ingress-pipy
    app.kubernetes.io/managed-by: Kustomize
    app.kubernetes.io/name: ingress-pipy
    app.kubernetes.io/version: 0.2.0
    control-plane: ingress-pipy-manager
  name: ingress-pipy-manager-fip
  namespace: ingress-pipy
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: manager
      app.kubernetes.io/instance: ingress-pipy
      app.kubernetes.io/name: ingress-pipy
      control-plane: ingress-pipy-manager
  template:
    metadata:
      labels:
        app.kubernetes.io/component: manager
        app.kubernetes.io/instance: ingress-pipy
        app.kubernetes.io/name: ingress-pipy
        control-plane: ingress-pipy-manager
    spec:
      containers:
      - args:
        - --leader-elect
        - --v=2
        command:
        - /ingress-manager
        image: flomesh/ingress-manager:0.2.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        ports:
        - containerPort: 9443
          name: webhook-server
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 100m
            memory: 30Mi
          requests:
            cpu: 100m
            memory: 20Mi
        securityContext:
          allowPrivilegeEscalation: false
        volumeMounts:
        - mountPath: /tmp/k8s-webhook-server/serving-certs
          name: cert
          readOnly: true
      securityContext:
        runAsNonRoot: true
        runAsUser: 101
      serviceAccountName: ingress-pipy-fip
      terminationGracePeriodSeconds: 10
      volumes:
      - name: cert
        secret:
          defaultMode: 420
          secretName: webhook-server-cert
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: serving-cert-fip
  namespace: ingress-pipy
spec:
  dnsNames:
  - webhook-service-fip.ingress-pipy.svc
  - webhook-service-fip.ingress-pipy.svc.cluster.local
  issuerRef:
    kind: Issuer
    name: selfsigned-issuer-fip
  secretName: webhook-server-cert
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: selfsigned-issuer-fip
  namespace: ingress-pipy
spec:
  selfSigned: {}
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: ingress-pipy/serving-cert-fip
  name: mutating-webhook-configuration-fip
webhooks:
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: webhook-service-fip
      namespace: ingress-pipy
      path: /mutate-flomesh-io-v1alpha1-ingressglobalhook
  failurePolicy: Fail
  name: mingressglobalhook.flomesh.kb.io
  rules:
  - apiGroups:
    - flomesh.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - ingressglobalhooks
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: webhook-service-fip
      namespace: ingress-pipy
      path: /mutate-mydummy-polaris-tech-io-v1alpha1-ingressrule
  failurePolicy: Fail
  name: mingressrule.flomesh.kb.io
  rules:
  - apiGroups:
    - flomesh.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - ingressrules
  sideEffects: None
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: ingress-pipy/serving-cert-fip
  name: validating-webhook-configuration-fip
webhooks:
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: webhook-service-fip
      namespace: ingress-pipy
      path: /validate-flomesh-io-v1alpha1-ingressglobalhook
  failurePolicy: Fail
  name: vingressglobalhook.flomesh.kb.io
  rules:
  - apiGroups:
    - flomesh.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - ingressglobalhooks
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: webhook-service-fip
      namespace: ingress-pipy
      path: /validate-mydummy-polaris-tech-io-v1alpha1-ingressrule
  failurePolicy: Fail
  name: vingressrule.flomesh.kb.io
  rules:
  - apiGroups:
    - flomesh.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - ingressrules
  sideEffects: None
